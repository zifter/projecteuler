# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

def eratosthenes(limit):
    prime = [True] * limit
    prime[0] = False  # 0 is not a prime
    prime[1] = False

    for i in xrange(2, limit):
        if prime[i]:
            notPrime = xrange(i, limit, i)
            for x in notPrime:
                prime[x] = False

            prime[i] = True  # hack

    primesFactors = []
    for i in xrange(0, limit):
        if prime[i]:
            primesFactors.append(i)
    return primesFactors


g_er_num = 2000000
g_natural_number = eratosthenes(g_er_num)


def get_primes(number):
    global g_natural_number
    halfNumber = number / 2
    if halfNumber > g_natural_number[-1]:
        global g_er_num
        g_er_num = g_er_num * 2
        g_natural_number = eratosthenes(g_er_num)

    primes = []

    i = 0
    while g_natural_number[i] <= halfNumber:
        if number % g_natural_number[i] == 0:
            number = number / g_natural_number[i]
            primes.append(g_natural_number[i])

            if number == 1:
                break
        else:
            i = i + 1

    return primes


g_cache = [0, 1, 3]


def get_triangle_number(index):
    global g_cache
    if index >= len(g_cache):
        g_cache.append(get_triangle_number(index - 1) + index)

    return g_cache[index]


def len_list_of_factors(number):
    primes = get_primes(number)

    d = {}
    for p in primes:
        if p in d:
            d[p] = d[p] + 1
        else:
            d[p] = 2

    l = 1
    for k, v in d.iteritems():
        l = l * v
    return l  # 1 and number


def main():
    i = 3
    while True:
        n = get_triangle_number(i)
        l = len_list_of_factors(n)
        print n, l
        if l > 500:
            print "Answer %s " % n
            break

        i = i + 1


main()
